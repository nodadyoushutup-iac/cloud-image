name: Build and Release Image

on:
  push:
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      version:
        description: "Semantic version tag for the release"
        required: true
      file_name:
        description: "File name"
        required: true
        default: jammy-cloud-image-amd64
        type: choice
        options:
          - jammy-cloud-image-amd64

env:
  PACKER_LOG: 1
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CLOUD_REPOSITORY_URL: ${{ secrets.CLOUD_REPOSITORY_URL }}

permissions:
  contents: write

jobs:
  build:
    runs-on: self-hosted
    outputs:
      version: ${{ steps.set_vars.outputs.version }}
      file_name: ${{ steps.set_vars.outputs.file_name }}

    steps:
      - name: Set build variables
        id: set_vars
        run: |
          echo "VERSION=${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_ENV
          echo "FILE_NAME=${{ github.event.inputs.file_name || 'jammy-cloud-image-amd64' }}-${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_ENV
          echo "version=${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_OUTPUT
          echo "file_name=${{ github.event.inputs.file_name || 'jammy-cloud-image-amd64' }}-${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Show build variables
        run: |
          echo "Building version: $VERSION"
          echo "Final FILE_NAME: $FILE_NAME"

      - name: Checkout repository
        id: checkout_build
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # - name: Install packages
      #   id: apt_install
      #   run: |
      #     sudo apt-get update && sudo apt-get install -y jq qemu-system xorriso unzip

      - name: Packer setup
        uses: hashicorp/setup-packer@main
        id: packer_setup
        with:
          version: "latest"

      - name: Packer init
        id: packer_init
        run: |
          packer init cloud_image.pkr.hcl

      - name: Packer validate
        id: packer_validate
        run: |
          packer validate cloud_image.pkr.hcl

      - name: Packer build
        id: packer_build
        run: |
          packer build \
          -var="output_dir=output" \
          -var="file_name=${{ env.FILE_NAME }}" \
          cloud_image.pkr.hcl

      - name: Generate checksum
        id: generate_checksum
        run: |
          mkdir -p "output"
          sha256sum "output/${{ env.FILE_NAME }}.img" > "output/${{ env.FILE_NAME }}.img.sha256"

      - name: Upload artifacts to workspace
        uses: actions/upload-artifact@v4
        id: artifact_upload
        with:
          name: artifact
          path: |
            output/${{ env.FILE_NAME }}.img
            output/${{ env.FILE_NAME }}.img.sha256

  release:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Set upload variables
        run: |
          echo "VERSION=${{ needs.build.outputs.version }}" >> $GITHUB_ENV
          echo "FILE_NAME=${{ needs.build.outputs.file_name }}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: output

      - name: Upload image to cloud repository
        id: upload_img
        env:
          CLOUD_REPOSITORY_APIKEY: ${{ secrets.CLOUD_REPOSITORY_APIKEY }}
        run: |
          response=$(./script/upload_image.sh "output/${{ env.FILE_NAME }}.img" "${{ env.CLOUD_REPOSITORY_URL }}/upload")
          printf 'response<<EOF\n%s\nEOF\n' "$response" >> "$GITHUB_OUTPUT"

      - name: Parse upload response
        id: parse_response
        run: |
          IMAGE_PATH=$(echo '${{ steps.upload_img.outputs.response }}' | jq -r '.path')
          SHA256_PATH=$(echo '${{ steps.upload_img.outputs.response }}' | jq -r '.sha256_file')
          IMAGE_SHA=$(echo '${{ steps.upload_img.outputs.response }}' | jq -r '.sha256')
          IMAGE_URL="${{ env.CLOUD_REPOSITORY_URL }}/$IMAGE_PATH"
          SHA256_URL="${{ env.CLOUD_REPOSITORY_URL }}/$SHA256_PATH"
          echo "image_url=$IMAGE_URL" >> "$GITHUB_OUTPUT"
          echo "sha_url=$SHA256_URL" >> "$GITHUB_OUTPUT"
          echo "sha=$IMAGE_SHA" >> "$GITHUB_OUTPUT"
          cat <<EOF > release_notes.txt
          Image URL: $IMAGE_URL
          Checksum URL: $SHA256_URL
          SHA256: $IMAGE_SHA
          EOF

      - name: Create GitHub release
        run: |
          echo "Creating release for tag: ${{ env.VERSION }}"
          gh release create "${{ env.VERSION }}" \
            --title "${{ env.VERSION }}" \
            --notes-file release_notes.txt
